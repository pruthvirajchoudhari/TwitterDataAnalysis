##Twitter data profiling for specific topic based on metrics and analysing bot activity respective to that topic

1. Twitter Data Extraction (Twitter API)

import tweepy
import numpy as np
import pandas as pd
import time

CONSUMER_KEY = 'TD11PAHzNuh5URzjGmlRFws6U'
CONSUMER_SECRET = 'wUVgpoU6vDI6aBfYWkYj6Mj4br8OxGSTR4WMngyYjAxfMX5Wrb'
ACCESS_TOKEN = '1325754268083646464-ie4x3sjTrVkvePrh2SYWeyZQxT4tpP'
ACCESS_SECRET = 'EvgCKJG5voMpHwDuAwh7ZDCdeZvJj6BcQ8oEc4CpZejcQ'

auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)
api = tweepy.API(auth)

df = pd.DataFrame(columns = ['created_at','id','author','Tweets','fav_count','rt_count'])
df2 = pd.DataFrame()

def stream(data, file_name):
  i = 0
  for tweet in tweepy.Cursor(api.search,q=data, count=100).items():
    print(i, end='\r')
    df.loc[i,'created_at'] = tweet.created_at
    df.loc[i,'id'] = tweet.id
    df.loc[i,'author'] = tweet.author.id
    df.loc[i,'Tweets'] = tweet.text
    df.loc[i,'fav_count'] = tweet.favorite_count
    df.loc[i,'rt_count'] = tweet.retweet_count
    df.to_csv('{}.csv'.format(file_name))
    i=i+1
    if i == 3000:
      break
    else:
      pass

for x in range(4):
  stream(data = ['raytheon'], file_name = 'my_tweets')
  print(2)
  df2 = df2.append(df)
  time.sleep(300)

 df2
 ##############
  	created_at 				id 						author 				Tweets 												fav_count 	rt_count
0 	2021-01-07 05:24:17 	1347051409250820098 	714194468170125313 	RT @IwriteOK: Anyway, I guess the only good ne... 	0 			208
1 	2021-01-07 05:20:29 	1347050453507436546 	1097241763268431877 RT @IwriteOK: Anyway, I guess the only good ne... 	0 			208
2 	2021-01-07 05:18:33 	1347049965248421888 	60690527 			RT @IwriteOK: Anyway, I guess the only good ne... 	0 			208
###############

from google.colab import drive
drive.mount('drive')
df2.to_csv('data.csv')
!cp data.csv "drive/My Drive/"

2. Botometer script

!pip install botometer
import pandas as pd
from google.colab import files
uploaded = files.upload()

import io
data = pd.read_csv(io.BytesIO(uploaded['raytheonData.csv']))
data_csv = pd.DataFrame(data, columns= ['author_id'])
accountID_array = data_csv['author_id'].values.tolist()
print(accountID_array)
bot_array = []
## [1331847209277476867, 1000423026884841473, 99120000, 986338871628779520, 1000423026884841473,.....]

import botometer
#Twitter API Authentication Details
# b7c7a8a518msh7b00ba5e88ec16dp173144jsn8f7a543f3e9c
rapidapi_key = "7e367c6f40mshb94bcffcd870cbdp197422jsn8bde76584a4a"
twitter_app_auth = {
    'consumer_key': 'EUe2BP8daQygvYffNzGkIpzdm',
    'consumer_secret': 'o7WShQCGhWTH1ipCY5A8cN1zqIgVgOj5CApoi2eoBo9NNivpDF',
    'access_token': '1324594711022088194-H1DEN43xNtROJNIwlgQqrVRAitiHE6',
    'access_token_secret': 'Z6wnNgqXVDlfdni52BSsKUsuTI7fbR7SDiMWVZYx9x5nz',
  }
bom = botometer.Botometer(wait_on_ratelimit=True,
                          rapidapi_key=rapidapi_key,
                          **twitter_app_auth)
i=0
# Checking sequence of accounts
for result in bom.check_accounts_in(accountID_array):
    print(i)
    i = i+1
    x = result[1]
    print(x)
    y = list(x.values())
    print(y)
    w = list(y[0].values())
    print(w)
    print(' ')
    v = (w[0]+w[1])/2
    if (v < 0.6):
      bot_array.append(0)
    else:
      bot_array.append(1)

#############
0
{'cap': {'english': 0.7965971518887632, 'universal': 0.8053085767533751}, 'display_scores': {'english': {'astroturf': 1.6, 'fake_follower': 3.0, 'financial': 1.2, 'other': 3.2, 'overall': 3.2, 'self_declared': 0.7, 'spammer': 0.6}, 'universal': {'astroturf': 0.6, 'fake_follower': 2.9, 'financial': 0.6, 'other': 2.6, 'overall': 2.9, 'self_declared': 0.1, 'spammer': 1.8}}, 'raw_scores': {'english': {'astroturf': 0.31, 'fake_follower': 0.61, 'financial': 0.25, 'other': 0.63, 'overall': 0.63, 'self_declared': 0.14, 'spammer': 0.13}, 'universal': {'astroturf': 0.13, 'fake_follower': 0.58, 'financial': 0.12, 'other': 0.52, 'overall': 0.58, 'self_declared': 0.02, 'spammer': 0.36}}, 'user': {'majority_lang': 'en', 'user_data': {'id_str': '1331847209277476867', 'screen_name': 'AmitJha16095574'}}}
[{'english': 0.7965971518887632, 'universal': 0.8053085767533751}, {'english': {'astroturf': 1.6, 'fake_follower': 3.0, 'financial': 1.2, 'other': 3.2, 'overall': 3.2, 'self_declared': 0.7, 'spammer': 0.6}, 'universal': {'astroturf': 0.6, 'fake_follower': 2.9, 'financial': 0.6, 'other': 2.6, 'overall': 2.9, 'self_declared': 0.1, 'spammer': 1.8}}, {'english': {'astroturf': 0.31, 'fake_follower': 0.61, 'financial': 0.25, 'other': 0.63, 'overall': 0.63, 'self_declared': 0.14, 'spammer': 0.13}, 'universal': {'astroturf': 0.13, 'fake_follower': 0.58, 'financial': 0.12, 'other': 0.52, 'overall': 0.58, 'self_declared': 0.02, 'spammer': 0.36}}, {'majority_lang': 'en', 'user_data': {'id_str': '1331847209277476867', 'screen_name': 'AmitJha16095574'}}]
[0.7965971518887632, 0.8053085767533751]
 
1
{'cap': {'english': 0.6915799517497913, 'universal': 0.5982419966968565}, 'display_scores': {'english': {'astroturf': 0.8, 'fake_follower': 0.7, 'financial': 0.0, 'other': 1.1, 'overall': 1.0, 'self_declared': 0.0, 'spammer': 0.0}, 'universal': {'astroturf': 0.9, 'fake_follower': 0.6, 'financial': 0.0, 'other': 1.8, 'overall': 0.7, 'self_declared': 0.0, 'spammer': 0.0}}, 'raw_scores': {'english': {'astroturf': 0.15, 'fake_follower': 0.14, 'financial': 0.01, 'other': 0.22, 'overall': 0.2, 'self_declared': 0.0, 'spammer': 0.0}, 'universal': {'astroturf': 0.18, 'fake_follower': 0.11, 'financial': 0.0, 'other': 0.35, 'overall': 0.14, 'self_declared': 0.0, 'spammer': 0.01}}, 'user': {'majority_lang': 'en', 'user_data': {'id_str': '1000423026884841473', 'screen_name': 'SmollestBella'}}}
[{'english': 0.6915799517497913, 'universal': 0.5982419966968565}, {'english': {'astroturf': 0.8, 'fake_follower': 0.7, 'financial': 0.0, 'other': 1.1, 'overall': 1.0, 'self_declared': 0.0, 'spammer': 0.0}, 'universal': {'astroturf': 0.9, 'fake_follower': 0.6, 'financial': 0.0, 'other': 1.8, 'overall': 0.7, 'self_declared': 0.0, 'spammer': 0.0}}, {'english': {'astroturf': 0.15, 'fake_follower': 0.14, 'financial': 0.01, 'other': 0.22, 'overall': 0.2, 'self_declared': 0.0, 'spammer': 0.0}, 'universal': {'astroturf': 0.18, 'fake_follower': 0.11, 'financial': 0.0, 'other': 0.35, 'overall': 0.14, 'self_declared': 0.0, 'spammer': 0.01}}, {'majority_lang': 'en', 'user_data': {'id_str': '1000423026884841473', 'screen_name': 'SmollestBella'}}]
[0.6915799517497913, 0.5982419966968565]
###############

df["bot"] = bot_array
data = pd.read_csv(io.BytesIO(uploaded['raytheonData.csv']))
data['bot'] = df['bot']
data

from google.colab import drive
drive.mount('drive')
data.to_csv('raytheonData.csv', index=False)
!cp raytheonData.csv "drive/My Drive/"